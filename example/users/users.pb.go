// Code generated by protoc-gen-go.
// source: example/managment/users.proto
// DO NOT EDIT!

/*
Package users is a generated protocol buffer package.

It is generated from these files:
	example/managment/users.proto

It has these top-level messages:
	Empty
	ID
	User
*/
package users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ID struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type User struct {
	ID         int64  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name       []byte `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Email      string `protobuf:"bytes,3,opt,name=Email,json=email" json:"Email,omitempty"`
	UpdateddAt int64  `protobuf:"varint,4,opt,name=UpdateddAt,json=updateddAt" json:"UpdateddAt,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*ID)(nil), "ID")
	proto.RegisterType((*User)(nil), "User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Userer service

type UsererClient interface {
	Put(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error)
	// streams
	Putter(ctx context.Context, opts ...grpc.CallOption) (Userer_PutterClient, error)
	Getter(ctx context.Context, opts ...grpc.CallOption) (Userer_GetterClient, error)
}

type usererClient struct {
	cc *grpc.ClientConn
}

func NewUsererClient(cc *grpc.ClientConn) UsererClient {
	return &usererClient{cc}
}

func (c *usererClient) Put(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/Userer/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/Userer/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererClient) Putter(ctx context.Context, opts ...grpc.CallOption) (Userer_PutterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Userer_serviceDesc.Streams[0], c.cc, "/Userer/Putter", opts...)
	if err != nil {
		return nil, err
	}
	x := &usererPutterClient{stream}
	return x, nil
}

type Userer_PutterClient interface {
	Send(*User) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type usererPutterClient struct {
	grpc.ClientStream
}

func (x *usererPutterClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usererPutterClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usererClient) Getter(ctx context.Context, opts ...grpc.CallOption) (Userer_GetterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Userer_serviceDesc.Streams[1], c.cc, "/Userer/Getter", opts...)
	if err != nil {
		return nil, err
	}
	x := &usererGetterClient{stream}
	return x, nil
}

type Userer_GetterClient interface {
	Send(*ID) error
	Recv() (*User, error)
	grpc.ClientStream
}

type usererGetterClient struct {
	grpc.ClientStream
}

func (x *usererGetterClient) Send(m *ID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usererGetterClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Userer service

type UsererServer interface {
	Put(context.Context, *User) (*Empty, error)
	Get(context.Context, *ID) (*User, error)
	// streams
	Putter(Userer_PutterServer) error
	Getter(Userer_GetterServer) error
}

func RegisterUsererServer(s *grpc.Server, srv UsererServer) {
	s.RegisterService(&_Userer_serviceDesc, srv)
}

func _Userer_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Userer/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).Put(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Userer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userer_Putter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsererServer).Putter(&usererPutterServer{stream})
}

type Userer_PutterServer interface {
	Send(*Empty) error
	Recv() (*User, error)
	grpc.ServerStream
}

type usererPutterServer struct {
	grpc.ServerStream
}

func (x *usererPutterServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usererPutterServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Userer_Getter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsererServer).Getter(&usererGetterServer{stream})
}

type Userer_GetterServer interface {
	Send(*User) error
	Recv() (*ID, error)
	grpc.ServerStream
}

type usererGetterServer struct {
	grpc.ServerStream
}

func (x *usererGetterServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usererGetterServer) Recv() (*ID, error) {
	m := new(ID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Userer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Userer",
	HandlerType: (*UsererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Userer_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Userer_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Putter",
			Handler:       _Userer_Putter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Getter",
			Handler:       _Userer_Getter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("example/managment/users.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x8f, 0xd1, 0x4b, 0xc3, 0x30,
	0x10, 0xc6, 0x97, 0xa6, 0x8d, 0x78, 0x88, 0x0f, 0xe7, 0x90, 0x52, 0x98, 0x94, 0x3c, 0xe5, 0x29,
	0x13, 0xfd, 0x0b, 0x84, 0xca, 0xd8, 0x8b, 0x8c, 0xc2, 0xde, 0x8d, 0xf4, 0x90, 0xc1, 0xd2, 0x85,
	0xf4, 0x02, 0xfa, 0xdf, 0x4b, 0x3a, 0x10, 0x74, 0x2f, 0x07, 0xdf, 0xf7, 0xbb, 0xfb, 0xee, 0x0e,
	0x56, 0xf4, 0xe5, 0x7c, 0x38, 0xd2, 0xda, 0xbb, 0xd1, 0x7d, 0x7a, 0x1a, 0x79, 0x9d, 0x26, 0x8a,
	0x93, 0x0d, 0xf1, 0xc4, 0x27, 0x7d, 0x05, 0xd5, 0xab, 0x0f, 0xfc, 0xad, 0x97, 0x50, 0x6c, 0x3b,
	0xbc, 0xcd, 0xb5, 0x16, 0xad, 0x30, 0xb2, 0x2f, 0x0e, 0x9d, 0x7e, 0x87, 0x72, 0x3f, 0x51, 0xfc,
	0xef, 0x23, 0x42, 0xf9, 0xe6, 0x3c, 0xd5, 0x45, 0x2b, 0xcc, 0x4d, 0x5f, 0x8e, 0xce, 0x13, 0x2e,
	0x73, 0x94, 0x3b, 0x1c, 0x6b, 0xd9, 0x0a, 0x73, 0xdd, 0x57, 0x94, 0x05, 0x3e, 0x00, 0xec, 0xc3,
	0xe0, 0x98, 0x86, 0xe1, 0x85, 0xeb, 0x72, 0x4e, 0x80, 0xf4, 0xeb, 0x3c, 0x05, 0x50, 0x79, 0x03,
	0x45, 0xbc, 0x07, 0xb9, 0x4b, 0x8c, 0x95, 0xcd, 0xba, 0x51, 0xf6, 0x7c, 0xd7, 0x02, 0xef, 0x40,
	0x6e, 0x88, 0x51, 0xda, 0x6d, 0xd7, 0x9c, 0xa1, 0x5e, 0xe0, 0x0a, 0xd4, 0x2e, 0x31, 0x53, 0xbc,
	0xe8, 0x37, 0xe2, 0x51, 0x60, 0x03, 0x6a, 0x43, 0x33, 0xfe, 0x33, 0x96, 0xd9, 0x87, 0x9a, 0x3f,
	0x7f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x91, 0x90, 0x8c, 0x58, 0x1a, 0x01, 0x00, 0x00,
}
