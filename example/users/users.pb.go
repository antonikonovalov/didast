// Code generated by protoc-gen-go.
// source: example/users/users.proto
// DO NOT EDIT!

/*
Package users is a generated protocol buffer package.

It is generated from these files:
	example/users/users.proto

It has these top-level messages:
	Empty
	ID
	Object
	User
*/
package users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ID struct {
	ID     int64  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Entity string `protobuf:"bytes,2,opt,name=Entity,json=entity" json:"Entity,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Object struct {
	ID     int64  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Data   string `protobuf:"bytes,2,opt,name=Data,json=data" json:"Data,omitempty"`
	Entity string `protobuf:"bytes,3,opt,name=Entity,json=entity" json:"Entity,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type User struct {
	ID        int64  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name      []byte `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=Email,json=email" json:"Email,omitempty"`
	UpdatedAt int64  `protobuf:"varint,4,opt,name=UpdatedAt,json=updatedAt" json:"UpdatedAt,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*ID)(nil), "ID")
	proto.RegisterType((*Object)(nil), "Object")
	proto.RegisterType((*User)(nil), "User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Store service

type StoreClient interface {
	Put(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Object, error)
	// streams
	Putter(ctx context.Context, opts ...grpc.CallOption) (Store_PutterClient, error)
	Getter(ctx context.Context, opts ...grpc.CallOption) (Store_GetterClient, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Put(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/Store/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/Store/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Putter(ctx context.Context, opts ...grpc.CallOption) (Store_PutterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Store_serviceDesc.Streams[0], c.cc, "/Store/Putter", opts...)
	if err != nil {
		return nil, err
	}
	x := &storePutterClient{stream}
	return x, nil
}

type Store_PutterClient interface {
	Send(*Object) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type storePutterClient struct {
	grpc.ClientStream
}

func (x *storePutterClient) Send(m *Object) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storePutterClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) Getter(ctx context.Context, opts ...grpc.CallOption) (Store_GetterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Store_serviceDesc.Streams[1], c.cc, "/Store/Getter", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeGetterClient{stream}
	return x, nil
}

type Store_GetterClient interface {
	Send(*ID) error
	Recv() (*Object, error)
	grpc.ClientStream
}

type storeGetterClient struct {
	grpc.ClientStream
}

func (x *storeGetterClient) Send(m *ID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeGetterClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Store service

type StoreServer interface {
	Put(context.Context, *Object) (*Empty, error)
	Get(context.Context, *ID) (*Object, error)
	// streams
	Putter(Store_PutterServer) error
	Getter(Store_GetterServer) error
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Put(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Store/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Putter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).Putter(&storePutterServer{stream})
}

type Store_PutterServer interface {
	Send(*Empty) error
	Recv() (*Object, error)
	grpc.ServerStream
}

type storePutterServer struct {
	grpc.ServerStream
}

func (x *storePutterServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storePutterServer) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Store_Getter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).Getter(&storeGetterServer{stream})
}

type Store_GetterServer interface {
	Send(*Object) error
	Recv() (*ID, error)
	grpc.ServerStream
}

type storeGetterServer struct {
	grpc.ServerStream
}

func (x *storeGetterServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeGetterServer) Recv() (*ID, error) {
	m := new(ID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Store_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Store_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Putter",
			Handler:       _Store_Putter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Getter",
			Handler:       _Store_Getter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("example/users/users.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0xd9, 0xcd, 0x96, 0x0c, 0xe2, 0x61, 0x50, 0x89, 0xa5, 0x60, 0xc9, 0x29, 0x07,
	0x89, 0xa2, 0x9f, 0x40, 0xd8, 0x52, 0x7a, 0xd1, 0x12, 0xe9, 0x55, 0xd8, 0x9a, 0x39, 0x44, 0x9a,
	0x26, 0x6c, 0x26, 0x68, 0xbf, 0xbd, 0x64, 0xd3, 0x82, 0x7f, 0x7a, 0x19, 0x98, 0x7d, 0xef, 0xfd,
	0x78, 0x3b, 0x70, 0x4d, 0x5f, 0xb6, 0x6a, 0xb6, 0x74, 0xd7, 0xb5, 0xe4, 0xda, 0x61, 0x66, 0x8d,
	0xab, 0xb9, 0x4e, 0xc6, 0x10, 0xce, 0xab, 0x86, 0xf7, 0xc9, 0x2d, 0x04, 0x4b, 0x83, 0xe7, 0xfd,
	0x8c, 0xc5, 0x4c, 0xa4, 0x32, 0x0f, 0x4a, 0x83, 0x57, 0xa0, 0xe7, 0x3b, 0x2e, 0x79, 0x1f, 0x07,
	0x33, 0x91, 0x46, 0xb9, 0x26, 0xbf, 0x25, 0x06, 0xf4, 0xcb, 0xe6, 0x83, 0xde, 0xf9, 0x5f, 0x02,
	0x41, 0x19, 0xcb, 0xf6, 0xe0, 0x57, 0x85, 0x65, 0xfb, 0x83, 0x22, 0x7f, 0x51, 0xde, 0x40, 0xad,
	0x5b, 0x72, 0xa7, 0x18, 0xcf, 0xb6, 0x22, 0xcf, 0x38, 0xcb, 0xd5, 0xce, 0x56, 0x84, 0x17, 0x7d,
	0x51, 0x5b, 0x6e, 0x0f, 0x88, 0x90, 0xfa, 0x05, 0xa7, 0x10, 0xad, 0x9b, 0xc2, 0x32, 0x15, 0x4f,
	0x1c, 0x2b, 0x0f, 0x88, 0xba, 0xe3, 0xc3, 0xc3, 0x27, 0x84, 0xaf, 0x5c, 0x3b, 0xc2, 0x18, 0xe4,
	0xaa, 0x63, 0x1c, 0x67, 0x43, 0xe9, 0x89, 0xce, 0x86, 0x4f, 0x8f, 0xf0, 0x12, 0xe4, 0x82, 0x18,
	0x65, 0xb6, 0x34, 0x93, 0xa3, 0x9c, 0x8c, 0xf0, 0x06, 0xf4, 0xaa, 0x63, 0x26, 0x77, 0x22, 0x93,
	0x8a, 0x7b, 0x81, 0x53, 0xd0, 0x0b, 0xf2, 0x86, 0x3f, 0xd1, 0x5e, 0xdd, 0x68, 0x7f, 0xdc, 0xc7,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xdc, 0x55, 0xcf, 0x79, 0x01, 0x00, 0x00,
}
